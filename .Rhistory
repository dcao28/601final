getwd()
setwd("~")
getwd()
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
library(devtools)
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
build("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
library(cdx)
library(robust)
method(lad)
methods(lad)
lad
area
lad(area$land,area$farm)
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
build("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
library(robust)
lad(area$land,area$farm)
methods(print)
print.lad
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
build("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
library(robust)
a<-lad(area$land,area$farm)
a
predict(a,4)
predict(a,6)
predict(a,1:4)
coef(a)
abline(a)
a
coef(a)
b<-lm(farm~land,area)
abline(b)
plot.new()
abline(b)
plot(area$land,area$farm)
abline(b)
abline(a)
predict(a,quantile(area$land,c(0,.25,.5,.75,1)))
quantile(area$land,c(0,.25,.5,.75,1))
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
build("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
library(robust)
example(lad)
library(robust)
?lad
example(lad)
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
library(devtools)
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
build("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
library(robust)
example(lad)
library(robust)
lad
example(lad)
?print.lad
?coef.lad
?print.lad
?predict.lad
library("robust", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("robust")
install.packages("/Users/CDX/WISC_R_HWK/R327/robust_0.1.tar.gz",repos = NULL,type="source")
example(lad)
require(robust)
example(lad)''
example(lad)
remove.packages("robust")
install.packages("/Users/CDX/WISC_R_HWK/R327/robust_0.1.tar.gz",repos = NULL,type="source")
library(robust)
lad
example(lad)
getwd
getwd()
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
library(devtools)
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
build("robust")
remove.packages("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
library(robust)
example(lad)
library(robust)
example(lad)
library(lad)
library(robust)
lad
lad(area$land,area$farm)
a<-lad(area$land,area$farm)
predict(a,3)
print(a)
coef(a)
example(lad)
library(robust)
example(lad)
remove.packages("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
example(lad)
a<-lad(area$land,area$farm)
coef(a)
example(lad)
example(lad)
a<-lad(area$land,area$farm)
coef(a)
example(lad)
remove.packages("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
library(robust)
example(lad)
.rdb' is corrupt
getwd()
check(robust)
heck(robust)
library(devtools)
check(robust)
check("robust")
check("robust")
build("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
library(robust)
example()
example(lad)
library(robust)
example(lad)
library(robust)
example(lad)
remove.packages("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
require(robust)
example(robust)
require(robust)
example(lad)
?scake
?scale
scale(c(1,2,3,4))
((1:4)-2.5)/sd(1:4)
?princomp
address <- "http://www.stat.wisc.edu/~gvludwig/fall_2012/midterm2_problem1.csv"
PM2.5 <- read.csv(address, header=TRUE)
summary(model <- lm(log(PM) ~ LAT + LON + MAX + MIN + PCP + N1 + S1 + A1 + C1 + F1
summary(model <- lm(log(PM) ~ LAT + LON + MAX + MIN + PCP + N1 + S1 + A1 + C1 + F
summary(model <- lm(log(PM) ~ LAT + LON + MAX + MIN + PCP + N1 + S1 + A1 + C1 + F1                    + I1, data = PM2.5)
summary(model <- lm(log(PM) ~ LAT + LON + MAX + MIN + PCP + N1 + S1 + A1 + C1 + F1+ I1, data = PM2.5)
)
X <- model.matrix(model)[,-1]
pc.cr <-princomp(scale(X))
plot(pc.cr)
pc.cr$loadings
pc.cr$loadings
x<-scale(X[,-1])
eigen(t(x)%*%x)$vectors
x<-scale(X)
eigen(t(x)%*%x)$vectors
pc.cr$loadings
svdx<-svd(x)
svdx$v
eigen(t(x)%*%x)$vectors
?eigen
?princomp
?svd
?eigen
eigen(t(x)%*%x)$vec
eigen(t(x)%*%x)$vectors
eigen(t(x)%*%x)$vec
library(rugarch)
?ugarchforecast
library(forecast)
?HoltWinters
?optim
install.packages("RSPerl")
install.packages()
install.packages("mcmc")
install.packages("coda")
?mcmc
help(mcmc)
help("mcmc")
install.packages("R2WinBUGS")
library(R2WinBUGS)
?bugs
data(schools)
schools
J <- nrow(schools)
y <- schools$estimate
sigma.y <- schools$sd
data <- list(J=J, y=y, sigma.y=sigma.y)
inits <- function(){
list(theta=rnorm(J, 0, 100), mu.theta=rnorm(1, 0, 100),
sigma.theta=runif(1, 0, 100))
}
parameters <- c("theta", "mu.theta", "sigma.theta")
model.file <- system.file(package="R2WinBUGS", "model", "schools.txt")
schools.sim <- bugs(data, inits, parameters, model.file,
n.chains=3, n.iter=5000,
bugs.directory="/Applications/OpenBUGS/OpenBUGS323",
working.directory = ".",
WINE="usr/local/Cellar/wine/1.6.2/bin/wine",
WINEPATH="usr/local/Cellar/wine/1.6.2/bin/winepath")
schools.sim <- bugs(data, inits, parameters, model.file,
n.chains=3, n.iter=5000,
bugs.directory="/Applications/OpenBUGS/OpenBUGS323",
working.directory = ".",
WINE="usr/local/bin/wine",
WINEPATH="usr/local/bin/winepath")
schools.sim <- bugs(data, inits, parameters, model.file,
n.chains=3, n.iter=5000,
bugs.directory="/Applications/OpenBUGS/OpenBUGS323",
working.directory = ".",
useWINE=TRUE,
WINE="/usr/local/bin/wine",
WINEPATH="/usr/local/bin/winepath")
schools.sim <- bugs(data, inits, parameters, model.file,
n.chains=3, n.iter=5000,
bugs.directory="~/.wine/drive_c/Program Files/OpenBUGS",
working.directory = ".",
useWINE=TRUE,
WINE="/usr/local/bin/wine",
WINEPATH="/usr/local/bin/winepath")
data(schools)
#define the model
nummodel <- function(){
for (j in 1:J){
y[j] ~ dnorm (theta[j], tau.y[j])
theta[j] ~ dnorm (mu.theta, tau.theta)
tau.y[j] <- pow(sigma.y[j], -2)}
mu.theta ~ dnorm (0.0, 1.0E-6)
tau.theta <- pow(sigma.theta, -2)
sigma.theta ~ dunif (0, 1000)
}
# write the model code out to a file
write.model(nummodel, "nummodel.txt")
model.file1 = paste(getwd(),"nummodel.txt", sep="/")
## and let's take a look:
file.show("nummodel.txt")
J <- nrow(schools)
y <- schools$estimate
sigma.y <- schools$sd
data <- list ("J", "y", "sigma.y")
#initialization of variables
inits <- function(){
list(theta = rnorm(J, 0, 100), mu.theta = rnorm(1, 0, 100), sigma.theta = runif(1, 0, 100))}
#set the WINE working directory and the directory to OpenBUGS - change the OpenBUGS.exe location as necessary
WINE="/usr/local/bin/wine"
WINEPATH="/usr/local/bin/winepath"
OpenBUGS.pgm="/Users/CDX/.wine/drive_c/Program Files/OpenBUGS/OpenBUGS323/OpenBUGS.exe"
#these are the parameters to save
parameters = c("theta", "mu.theta", "sigma.theta")
#run the model
schools.sim <- bugs(data, inits, model.file = model.file1,parameters=parameters,n.chains = 3, n.iter = 1000, OpenBUGS.pgm=OpenBUGS.pgm, WINE=WINE, WINEPATH=WINEPATH,useWINE=T)
install.packages("R2OpenBUGS")
library(R2OpenBUGS)
schools.sim <- bugs(data, inits, model.file = model.file1,parameters=parameters,n.chains = 3, n.iter = 1000,
OpenBUGS.pgm=OpenBUGS.pgm, WINE=WINE, WINEPATH=WINEPATH,useWINE=T)
print(schools.sim)
remove.packages("R2WinBUGS")
getwd()
library(parallel)
detectCores()
lapply(1:5,function(x) x+2)
system.time(mclapply(1:5,function(x) x+2,mc.cores = 1))
system.time(mclapply(1:5,function(x) x+2,mc.cores = 4))
system.time(lapply(1:5,function(x) x+2))
system.time(mclapply(1:5,function(x) x+2,mc.cores = 1))
system.time(lapply(1:5,function(x) x+2))
system.time(mclapply(1:5,function(x) x+2,mc.cores = 4))
?"parLapply"
?"parallel-package"
?"paralle"
1:160000
d<-1:160000
cut(d,seq(d,d/4))
cut(d,seq(d,by=d/4))
cut(d,seq(d,by=160000/4))
?mcmapply
?mapply
?mcmapply
N=40
cut(1:N,seq(1:N,by = N/4))
cut(1:N,seq(1,N,by = N/4))
cut(0:N,seq(1,N,by = N/4))
cut(1:N,seq(0,N,by = N/4))
setwd("~/601final")
library(xlsx)
set.b<-read.csv(file = "data/Set_b.csv",header = T)
set.c<-read.csv(file = "data/Set_c.csv",header = T)
yy<- read.xlsx("data/TP53.xlsx",sheetIndex = 1)##TP53
suppressMessages(library(MASS))
suppressMessages(library(bestglm))
suppressMessages(library(dplyr))
dd<-mutate(y=log(response),.data = set.b)#new y
dd<- select(dd,-response)
dd<-filter(dd,!(is.infinite(dd$y)))#new data
aic<-bestglm(Xy = dd,
family = gaussian,
IC = "AIC",
method = "backward")
names(aic$BestModel$model)
png("aic.png")
pairs(aic$BestModel$model)
bic<-bestglm(Xy = dd,
family = gaussian,
IC = "BIC",
method = "forward")
bic$BestModel
png("bic.png")
pairs(bic$BestModel$model)
dev.off()
getwd
getwd()
aic<-bestglm(Xy = dd,
family = gaussian,
IC = "AIC",
method = "forward")
names(aic$BestModel$model)
summary(aic)
aic
library(pls)
pca<-pcr(y ~ ., ncomp = 10,scale = TRUE,
data = dd, validation = "CV")
summary(pca)
x=set.b[-1]
pc.cr<-princomp(x)
loadings(pc.cr)
load.m<-loadings(pc.cr)
load.m<-loadings(pc.cr)
str(load.m)
unclass(load.m)
load.m<-unclass(load.m)
unclass(load.m)
str(load.m)
pc.cr$loadings[,1:10]
load.m[,1:10]
pca<-pcr(y ~ ., ncomp = 10,scale = TRUE,
data = dd, validation = "CV")
summary(pca)
X<-x%*%load.m[,1:10]
pc.cr$scores
dd.pca<- cbind(dd$y,z)
z<-pc.cr$scores[,1:10]
dd.pca<- cbind(dd$y,z)
dim(z)
length(dd$y)
x=select(dd,-y)
pc.cr<-princomp(x)
load.m<-loadings(pc.cr)
load.m[,1:10]
z<-pc.cr$scores[,1:10]
dd.pca<- cbind(dd$y,z)
lm(y~.,dd.pca)
dd.pca<- as.data.frame(dd.pca)
names(dd.pca)
names(dd.pca)[1]<-"y"
lm(y~.,dd.pca)
pca
summary(pca)
library(pls)
pca<-pcr(y ~ ., ncomp = 10,scale = TRUE,
data = dd, validation = "CV")
summary(pca)
pca$coefficients
pca$loadings
pca$model
lm(y~pca$scores,data = dd)
lm(y~.,dd.pca)
load.m[,1:10]
pca$loadings
pca$loadings[,1:10]
load.m[,1:10]
pca$loadings[,1:10]
pca$loadings[,1:10][,1]
load.m[,1:10][,1]
sum((load.m[,1:10][,1])^2)
sum((pca$loadings[,1:10][,1])^2))
sum((pca$loadings[,1:10][,1])^2)
lm(y~pca$scores,data = dd)
pca.lm<-lm(y~pca$scores,data = dd)
summary(pca.lm)
lmpca<-lm(y~.,dd.pca)
summary(lmpca)
pca.lm<-lm(y~pca$scores,dd)
summary(pca.lm)
pls<-plsr(y ~ .,ncomp = 10,scale = TRUE,
data = dd, validation = "CV",method="simpls")
summary(pls)
pls.lm<-lm(y~pls$scores,dd)
summary(pls.lm)
source("GMC.R")
GMC
