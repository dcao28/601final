load("../Rdata/OptEveryLambda1_b.RData")
optgmc<-sapply(OptEveryLambda1_b, function(x) return(x[c(length(x))]))
(optgmc<- OptEveryLambda1_b[[which.max(optgmc)]])
source("you_T.R")
source("final_project.R")
getwd()
list.files("/Users/CDX/601final/cdx/Rdata/GMC")
gmc.forward<-list.files("/Users/CDX/601final/cdx/Rdata/GMC")
gmc.forward<-list.files("/Users/CDX/601final/cdx/Rdata/GMC")
for(i in gmc.forward ){
load(i)
}
gmc.forward<-list.files("/Users/CDX/601final/cdx/Rdata/GMC")
for(i in gmc.forward ){
i<-paste("/Users/CDX/601final/cdx/Rdata/GMC/",i,sep = "")
load(i)
}
gmc.forward
rm(list = ls())
gmc.forward<-list.files("/Users/CDX/601final/cdx/Rdata/GMC")
for(i in gmc.forward ){
i<-paste("/Users/CDX/601final/cdx/Rdata/GMC/",i,sep = "")
load(i)
stepBestGLM
}
rm(list = ls())
gmc.forward<-list.files("/Users/CDX/601final/cdx/Rdata/GMC")
for(i in gmc.forward ){
i<-paste("/Users/CDX/601final/cdx/Rdata/GMC/",i,sep = "")
load(i)
print(stepBestGLM)
}
rm(list = ls())
gmc.forward<-list.files("/Users/CDX/601final/cdx/Rdata/GMC")
for(i in gmc.forward ){
cat(i,"\n")
i<-paste("/Users/CDX/601final/cdx/Rdata/GMC/",i,sep = "")
load(i)
print(stepBestGLM)
}
rm(list = ls())
gmc.forward<-list.files("/Users/CDX/601final/cdx/Rdata/GMC")
for(i in gmc.forward ){
cat(i,"\n")
i<-paste("/Users/CDX/601final/cdx/Rdata/GMC/",i,sep = "")
load(i)
print(stepBestGLM)
cat("##################################################","\n")
}
?seq
seq(0, 1, length.out = 11)
lambda.select <- function(new.m){
coef.abs <- sapply(new.m, function(x) return(abs(coef(x))))
rnge<- seq(1/max(coef.abs),1/min(coef.abs),length.out = 5)#lambda range
lambda1<- as.vector(sapply(rnge, function(x) rep(x,length(rnge))))
lambda2<- rnge
lambda.set <- rbind(lambda1, lambda2)
lambda.set <- as.data.frame(lambda.set)
return(lambda.set)
}
source("you_T.R")
load("../Rdata/GMC/stepBestGlM_CT_G3.RData")
ls()
stepBestGLM
load("../Rdata/GMC/stepBestGlM_CT_G1.RData")
stepBestGLM
rm(list = ls())
suppressMessages(require(parallel))
source("../Script/GMC.R")
load("../data/set_b_log.RData")
set_b_log$y <- exp(set_b_log$y)
load("../data/set_c_log.RData")
set_c_log$y <- exp(set_c_log$y)
#load("../data/set_combine_log.RData")
cat("read 3 data sets \n")
### link function G1ï¼š4 ####
g1<-function(x){
return(x)
}
g2<-function(x){
return(exp(x))
}
g3<-function(x){
return(x^2)
}
g4<-function(x){
return(x^3)
}
cat("set link function \n")
### optimiz func 1,2####
findopt1 <- function(lambda,g,model){#with linear assumption
lambda1<-lambda[1];lambda2<-lambda[2]
fn<-function(beta){
xb= as.matrix(model$model[-1]) %*% beta[-1]+beta[1]
fit.n<-g(xb)
resid<-model$model$y- fit.n
vg<-var(fit.n)
return(-(vg/(vg+var(resid)))+ lambda1*abs(var(fit.n,resid))+lambda2*sum(abs(beta)))
}
initials <- model$coefficients
opt<-optim(par = initials, fn =fn, method = "Nelder-Mead" )
return(c(lambda,opt$par,-opt$value))
}
findopt2 <- function(lambda,g,model){#no linear assumption
fn<-function(beta){
xb= as.matrix(model$model[-1]) %*% beta[-1]+beta[1]
fit.n<-g(xb)
resid<-model$model$y- fit.n
data<-cbind(fit.n,model$model$y)#X,Y
return(-GMC(data)[2]+lambda*sum(abs(beta)))
}
opt<-optim(par = initials, fn =fn, method = "Nelder-Mead" )
return(c(lambda,opt$par,-opt$value))
}
cat("set optimization function\n")
### initial lambdas ####
rnge<- seq(0,3,by = 0.5)#lambda range
lambda2<- as.vector(sapply(rnge, function(x) rep(x,length(rnge))))
lambda1<- 1# limit the variance between g(x) and residuals
lambda.set <- rbind(lambda1, lambda2)
lambda.set <- as.data.frame(lambda.set)#;dim(lambda.set)
cat("set lambda range\n")
### compute GMC ####
gmcPerLamda<-function(optgmc,model,g){
xb<- as.matrix(model$model[-1]) %*% optgmc[c(-1,-2,-3,-length(optgmc))] + optgmc[3]
fit.n<-g(xb)
data<-cbind(fit.n, model$model$y)#X,Y
GMC(data)[2]
}
compute_GMC<-function(lm,g,findopt){
OptEveryLambda1_b<-mclapply(lambda.set, FUN = findopt,g=g,model=lm,mc.cores=4)
GmcEverLamda<-sapply(OptEveryLambda1_b, gmcPerLamda,model=lm,g=g)#GMCs
c(max(GmcEverLamda),OptEveryLambda1_b[[which.max(GmcEverLamda)]])
}# GMC, lambda1,lambda2,betas,opt.value
lambda.set
source("final_project.R")
lambda2<- rnge<- seq(0,3,by = 0.5)#lasso lambda range
lambda1<- 1 # limit the variance between g(x) and residuals
lambda.set <- rbind(lambda1, lambda2)
lambda.set
source("final_project.R")
rm(list = ls())
load("../Rdata/GMC/stepBestGlM_Blog_G1.RData")
stepBestGLM
